generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_POOLED")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Bookmark {
  bookmark_id        Int       @id @default(autoincrement())
  user_id            String    @db.Uuid
  bookmarked_item_id String    @db.Uuid
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  User               User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model Brand {
  brand_id     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @db.VarChar(255)
  slug         String         @unique
  logo         String?
  description  String?
  website      String?
  domain       String?        @unique
  is_claimed   Boolean        @default(false)
  is_verified  Boolean        @default(false)
  followers_count Int         @default(0)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  BrandManager BrandManager[]
  Follow       Follow[]
  Newsletter   Newsletter[]
  Post         Post[]
  SocialLinks  SocialLinks?

  @@index([domain])
  @@index([slug])
}

model BrandManager {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String   @db.Uuid
  brand_id    String   @db.Uuid
  role        String   @default("OWNER")
  permissions String[] @default(["VIEW"])
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  created_by  String?  @db.Uuid
  Brand       Brand    @relation(fields: [brand_id], references: [brand_id], onDelete: Cascade)
  User        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, brand_id])
  @@index([brand_id])
  @@index([user_id])
}

model Comment {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content       String
  user_id       String        @db.Uuid
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  updated_at    DateTime?     @default(now()) @db.Timestamp(6)
  parent_id     String?       @db.Uuid
  post_id       Int
  Comment       Comment?      @relation("CommentToComment", fields: [parent_id], references: [id], onDelete: Cascade)
  other_Comment Comment[]     @relation("CommentToComment")
  User          User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  CommentLike   CommentLike[]
}

model CommentLike {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment_id String    @db.Uuid
  user_id    String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  like_type  String
  Comment    Comment   @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model Favorite {
  favorite_id      Int       @id @default(autoincrement())
  user_id          String?   @db.Uuid
  favorite_item_id String?   @db.Uuid
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  User             User?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model Follow {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  follower_id String   @db.Uuid
  brand_id    String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  Brand       Brand    @relation(fields: [brand_id], references: [brand_id], onDelete: Cascade)
  User        User     @relation(fields: [follower_id], references: [user_id], onDelete: Cascade)

  @@unique([follower_id, brand_id])
  @@index([brand_id])
  @@index([follower_id])
}

model Like {
  like_id       Int        @id @default(autoincrement())
  user_id       String     @db.Uuid
  newsletter_id Int
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  Newsletter    Newsletter @relation(fields: [newsletter_id], references: [newsletter_id], onDelete: Cascade, onUpdate: NoAction)
  User          User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([newsletter_id, user_id])
  @@index([created_at])
}

model Newsletter {
  newsletter_id       Int             @id @default(autoincrement())
  subject             String?
  sender              String?
  sender_slug         String?
  html_file_url       String?
  full_screenshot_url String?
  top_screenshot_url  String?
  content             String?
  summary             String?
  products_link       String?
  likes_count         Int?            @default(0)
  you_rocks_count     Int?            @default(0)
  created_at          DateTime?       @default(now()) @db.Timestamp(6)
  updated_at          DateTime?       @default(now()) @db.Timestamp(6)
  published_at        DateTime?
  user_id             String?         @db.Uuid
  brand_id            String?         @db.Uuid
  key_insights        String?
  Like                Like[]
  Brand               Brand?          @relation(fields: [brand_id], references: [brand_id], onDelete: Cascade)
  User                User?           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  NewsletterTag       NewsletterTag[]
  badges              Badge[]

  @@index([brand_id])
  @@index([sender_slug])
  @@index([user_id])
  @@index([published_at])
  @@index([likes_count])
  @@index([you_rocks_count])
  @@index([created_at])
  @@index([likes_count, created_at])
  @@index([you_rocks_count, created_at])
  @@index([published_at, likes_count])
  @@index([published_at, you_rocks_count])
}

model NewsletterTag {
  newsletter_id Int
  tag_id        Int
  userTagTag_id Int?
  Newsletter    Newsletter @relation(fields: [newsletter_id], references: [newsletter_id], onDelete: Cascade, onUpdate: NoAction)
  Tag           Tag        @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  UserTag       UserTag?   @relation(fields: [userTagTag_id], references: [tag_id])

  @@id([newsletter_id, tag_id])
}

model Post {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String
  content    String
  user_id    String    @db.Uuid
  brand_id   String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  Brand      Brand?    @relation(fields: [brand_id], references: [brand_id], onDelete: Cascade)
  User       User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  PostTag    PostTag[]

  @@index([brand_id])
  @@index([user_id])
}

model PostTag {
  post_id String  @db.Uuid
  tag_id  Int
  Post    Post    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  UserTag UserTag @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, tag_id])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  User         User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model SocialLinks {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instagram String?
  twitter   String?
  linkedin  String?
  facebook  String?
  youtube   String?
  github    String?
  user_id   String? @unique @db.Uuid
  brand_id  String? @unique @db.Uuid
  Brand     Brand?  @relation(fields: [brand_id], references: [brand_id], onDelete: Cascade)
  User      User?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Tag {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  slug          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  count         Int?            @default(0)
  NewsletterTag NewsletterTag[]
}

model User {
  user_id       String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String         @db.VarChar(255)
  surname       String?        @db.VarChar(255)
  username      String?        @unique @db.VarChar(255)
  email         String         @unique
  profile_photo String?
  password      String?
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  role          String         @default("FREE") @db.VarChar
  bio           String?
  website       String?
  location      String?        @db.VarChar(255)
  date_of_birth DateTime?      @db.Date
  updated_at    DateTime?      @default(now()) @db.Timestamp(6)
  status        String?        @default("active") @db.VarChar(255)
  last_login    DateTime?      @db.Timestamp(6)
  emailVerified DateTime?      @db.Timestamp(6)
  provider      String?        @db.VarChar(255)
  Account       Account[]
  Bookmark      Bookmark[]
  BrandManager  BrandManager[]
  Comment       Comment[]
  CommentLike   CommentLike[]
  Favorite      Favorite[]
  Follow        Follow[]
  Like          Like[]
  Newsletter    Newsletter[]
  Post          Post[]
  Session       Session[]
  SocialLinks   SocialLinks?
  UserTag       UserTag[]
  YouRock       YouRock[]

  @@index([username])
}

model UserTag {
  tag_id        Int             @id @default(autoincrement())
  user_id       String?         @db.Uuid
  tag           String?         @db.VarChar(255)
  NewsletterTag NewsletterTag[]
  PostTag       PostTag[]
  User          User?           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
}

model YouRock {
  yourock_id        Int       @id @default(autoincrement())
  user_id           String?   @db.Uuid
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  yourocked_item_id Int
  User              User?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model Badge {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          BadgeType
  category      BadgeCategory
  rank          BadgeRank
  count         Int
  earned_at     DateTime      @default(now()) @db.Timestamp(6)
  newsletter_id Int
  newsletter    Newsletter    @relation(fields: [newsletter_id], references: [newsletter_id], onDelete: Cascade)

  @@unique([type, category, rank, earned_at])
  @@index([newsletter_id])
  @@index([type, category, rank])
  @@index([earned_at])
  @@map("badges")
}

enum BadgeType {
  LIKE
  YOU_ROCK
}

enum BadgeCategory {
  DAY
  WEEK
  MONTH
}

enum BadgeRank {
  FIRST
  SECOND
  THIRD
}
